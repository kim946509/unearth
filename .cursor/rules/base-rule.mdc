---
description:📌 [0] 기본 원칙 (철학)
**모든 코드는 객체지향 설계 원칙(SOLID)**을 따른다.

**도메인 기반 개발(Domain-Driven Design)**을 따른다. 도메인 객체는 비즈니스의 주체이며, 모든 로직은 도메인 중심으로 구성된다.

클래스는 하나의 책임만 가져야 하며, 변경 이유는 단 하나여야 한다 (SRP).

코드 생성 시 중복 방지, 명확한 책임 분리, 의존성 최소화를 최우선으로 고려한다.

각 계층의 경계는 의도적으로 설계한다 (ex: controller ↔ service ↔ model ↔ repository).
globs: ["src/**/*"]
alwaysApply: true
---

📌 [0] 기본 원칙 (철학)
**모든 코드는 객체지향 설계 원칙(SOLID)**을 따른다.

**도메인 기반 개발(Domain-Driven Design)**을 따른다. 도메인 객체는 비즈니스의 주체이며, 모든 로직은 도메인 중심으로 구성된다.

클래스는 하나의 책임만 가져야 하며, 변경 이유는 단 하나여야 한다 (SRP).

코드 생성 시 중복 방지, 명확한 책임 분리, 의존성 최소화를 최우선으로 고려한다.

각 계층의 경계는 의도적으로 설계한다 (ex: controller ↔ service ↔ model ↔ repository).

또한 setter 어노테이션은 지양한다.필요한 변수에만 메서드를 생성한다. of, from 정적 메서드를 통해 생성하도록한다.

모든 응답은 공통 응답객체를 사용한다.

모든 커스텀 예외는 BaseException을 상속 받는다.

뷰에서는 공통 응답객체에 담긴 Response Code를 바탕으로 예외를 처리한다.

커스텀 예외는 메세지를 바로 유저에게 보여줄 수 있도록 작성한다.

뷰는 타임리프로 구현한다.
